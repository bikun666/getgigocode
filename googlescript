// Google Apps Script 验证码接收与提供 – 极速增强版（完整功能）
const MAX_ROWS = 200;

// ========== 接收 Webhook 数据并写入 ==========
function doPost(e) {
  const start = new Date().getTime();
  try {
    if (!e || !e.postData || !e.postData.contents) {
      return jsonResponse("ERROR", "未接收到有效 POST 数据");
    }

    const emailData = parseEmailData(e);
    if (!emailData || (!emailData.to && !emailData.subject && !emailData.textbody)) {
      return jsonResponse("ERROR", "无法解析邮件字段");
    }

    // —— 折叠正文换行 —— //
    const rawBody = emailData.textbody || "";
    const flatBody = rawBody.replace(/[\r\n]+/g, " ");
    // —— 以上结束 —— //

    // —— 提取验证码：只匹配 “認証コード：6位数字” —— //
    const code = extractCode(flatBody);
    // —— 以上结束 —— //

    const newRecord = [
      emailData.to       || "(未知)",
      code               || "(未找到)",
      Utilities.formatDate(new Date(), "Asia/Tokyo", "yyyy/MM/dd HH:mm:ss"),
      emailData.subject  || "(无主题)",
      emailData.from     || "(未知)",
      flatBody.substring(0, 200)
    ];

    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

    // === 跳过重复项 ===
    const recentRange = sheet
      .getRange(2, 1, Math.min(50, sheet.getLastRow() - 1), 3)
      .getValues();
    const isDuplicate = recentRange.some(row =>
      row[0] === newRecord[0] &&
      row[1] === newRecord[1] &&
      row[2] === newRecord[2]
    );
    if (isDuplicate) {
      return jsonResponse("SKIP", "发现重复数据，未写入");
    }

    // === 清理超额数据 ===
    const lastRow = sheet.getLastRow();
    if (lastRow >= MAX_ROWS) {
      const over = lastRow - MAX_ROWS + 1;
      if (over > 0) sheet.deleteRows(MAX_ROWS + 1 - over, over);
    }

    // === 插入新数据 ===
    sheet.insertRows(2, 1);
    sheet.getRange(2, 1, 1, 6).setValues([newRecord]);

    // === 刷新缓存 ===
    const sheetData = sheet
      .getRange(2, 1, 25, 6)
      .getValues()
      .filter(r => r[0] && r[1]);
    const result = sheetData.map(row => ({
      email:   row[0],
      code:    row[1],
      time:    row[2],
      subject: row[3]
    }));
    const json = JSON.stringify({ status: "OK", data: result });
    const hash = Utilities.base64Encode(
      Utilities.computeDigest(Utilities.DigestAlgorithm.MD5, json)
    );
    const cache = CacheService.getScriptCache();
    cache.put("sheetData", json, 15);
    cache.put("sheetHash", hash, 15);

    const end = new Date().getTime();
    return jsonResponse("OK", {
      timeMs: end - start,
      record: newRecord
    });
  } catch (err) {
    console.error("处理异常:", err);
    return jsonResponse("ERROR", err.toString());
  }
}

// ========== 提供数据给前端 ==========
function doGet(e) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
    const dataRange = sheet
      .getRange(2, 1, 25, 6)
      .getValues()
      .filter(r => r[0] && r[1]);
    const result = dataRange.map(row => ({
      email:   row[0],
      code:    row[1],
      time:    row[2],
      subject: row[3]
    }));
    return jsonResponse("OK", { data: result });
  } catch (err) {
    return jsonResponse("ERROR", err.toString());
  }
}

// ========== 提取验证码 ==========
function extractCode(text) {
  if (!text) return "";
  const m = /認証コード[:：]\s*([0-9]{6})/.exec(text);
  return (m && m[1]) ? m[1] : "";
}

// ========== JSON 响应封装 ==========
function jsonResponse(status, data) {
  return ContentService.createTextOutput(
    JSON.stringify(
      Object.assign(
        { status },
        typeof data === "string" ? { message: data } : data
      )
    )
  ).setMimeType(ContentService.MimeType.JSON);
}

// ========== 简易邮件解析函数 ==========
function parseEmailData(e) {
  try {
    const body = JSON.parse(e.postData.contents);
    return {
      to:       body.to,
      from:     body.from,
      subject:  body.subject,
      textbody: body.textbody
    };
  } catch (err) {
    return null;
  }
}
